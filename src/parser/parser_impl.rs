use crate::lexer::lexer_impl::{Bracket, Keyword, Operator, Tk, Token};

pub struct Parser {
    token_list: Vec<Token>,
    current_position: usize,
}

impl Parser {
    //! Parser::new
    //!
    //! Initiate the parser with a vector of tokens generated by the lexer
    //!
    //! @input token_list [Vec<Token>]: List of input tokens
    //! @return [Parser]: Generated parser
    pub fn new(token_list: Vec<Token>) -> Parser {
        Parser {
            token_list,
            current_position: 0,
        }
    }

    /// Parser::get_current
    ///
    /// Get the current token under exam
    fn get_current(&mut self) -> Token {
        return self.token_list[self.current_position].clone();
    }

    /// Parser::lookahead
    ///
    /// Get the next token under exam
    fn lookahead(&mut self) -> Token {
        return self.token_list[self.current_position + 1].clone();
    }

    /// Parser::parse
    ///
    /// Parse the input list of tokens
    pub fn parse(&mut self) {}
}
